<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Postman Collection Checkboxes</title>
</head>

<body>
    <h1>Select Requests</h1>

    <!-- Workspace dropdown and Refresh button -->
    <div>
        <label for="workspace">Workspace:</label>
        <select id="workspace" name="workspace" onchange="updateCollectionsDropdown();">
            <% workspaces.forEach(workspace=> { %>
                <option value="<%= workspace.id %>" <%=workspace.id===selectedWorkspaceId ? 'selected' : '' %>>
                    <%= workspace.name %>
                </option>
                <% }) %>
        </select>
        <button type="button" onclick="updateCollectionsDropdown();">Refresh Collections</button> <!-- New button -->
    </div>

    <!-- Collections dropdown -->
    <div>
        <label for="collection">Collection:</label>
        <select id="collection" name="collection" onchange="updateCheckboxes();">
            <% collections.forEach(collection=> { %>
                <option value="<%= collection.uid %>" <%=collection.uid===selectedCollectionId ? 'selected' : '' %>>
                    <%= collection.name %>
                </option>
                <% }) %>
        </select>
        <button type="button" onclick="updateCheckboxes();">Refresh Checkboxes</button> <!-- New button -->
    </div>

    <div id="checkboxes">
        <form method="post" action="/create-collection">

            <div id="checkboxesContainer"> <!-- Container for checkboxes -->
                <% function renderItems(items, startIndex) { let currentIndex=startIndex; items.forEach((item)=> {
                    if(item.item) {
                    %>
                    <h3>
                        <%= item.name %>
                    </h3>
                    <% currentIndex=renderItems(item.item, currentIndex); } else { %>
                        <div>
                            <input type="checkbox" id="request_<%= currentIndex %>" name="selectedRequests"
                                value="<%= currentIndex %>">
                            <label for="request_<%= currentIndex %>">
                                <%= item.name %>
                            </label>
                            <input type="hidden" name="requestData_<%= currentIndex %>"
                                value="<%= JSON.stringify(item) %>">
                        </div>
                        <% currentIndex++; } }); return currentIndex; 
                         } if (collectionData) { 
                            renderItems(requests, 0); } else { %>
                            <p>Collection not selected.</p>
                            <% } %>
            </div>
            <!-- Input for the name of the new collection -->
            <div>
                <label for="collectionName">New Collection Name:</label>
                <input type="text" id="collectionName" name="collectionName" placeholder="Enter collection name" required>
            </div>

            <!-- Public Workspaces dropdown -->
            <div>
                <label for="publicWorkspace">Public Workspace To Save New Collection To:</label>
                <select id="publicWorkspace" name="publicWorkspace" onchange="updatePublicWorkspaceId();">
                    <% publicWorkspaces.forEach(workspace=> { %>
                        <option value="<%= workspace.id %>">
                            <%= workspace.name %>
                        </option>
                        <% }) %>
                </select>
            </div>

            <input type="hidden" id="publicWorkspaceId" name="publicWorkspaceId"
                value="<%= publicWorkspaces[0] && publicWorkspaces[0].id %>">
            <button type="submit">Create New Collection</button>

        </form>
    </div>

    <script>
        
        function updatePublicWorkspaceId() {
            // Get the selected workspace ID from the dropdown
            var selectedWorkspaceId = document.getElementById('publicWorkspace').value;

            // Update the hidden input with the selected workspace ID
            document.getElementById('publicWorkspaceId').value = selectedWorkspaceId;
        }

        // Call the function on page load to ensure the hidden input has the correct initial value
        updatePublicWorkspaceId();

        async function updateCollectionsDropdown() {
            const workspaceId = document.getElementById('workspace').value;
            const collectionsDropdown = document.getElementById('collection');

            try {
                const response = await fetch(`/collections-for-workspace/${workspaceId}`);
                const collections = await response.json();

                // Clear the dropdown
                collectionsDropdown.innerHTML = '';

                // Populate the dropdown with new collections
                collections.forEach(collection => {
                    const option = document.createElement('option');
                    option.value = collection.id;
                    option.textContent = collection.name;
                    collectionsDropdown.appendChild(option);
                });
            } catch (error) {
                console.error('Failed to update collections dropdown:', error);
            }
        }

        let checkboxIndex = 0; // Global index for all checkboxes

        async function updateCheckboxes() {
            const collectionId = document.getElementById('collection').value;
            const checkboxesContainer = document.getElementById('checkboxesContainer');

            async function renderRequests(requests) {
                for (const request of requests) {
                    const checkboxDiv = document.createElement('div');

                    if (request.item) {
                        // This request has nested items, create an h3 header
                        const header = document.createElement('h3');
                        header.textContent = request.name;
                        checkboxDiv.appendChild(header);
                        checkboxesContainer.appendChild(checkboxDiv);

                        // Recursively render nested items and update the global index
                        checkboxIndex = await renderRequests(request.item, checkboxIndex + 1);
                    } else {
                        // This is an innermost request, create a checkbox
                        const input = document.createElement('input');
                        input.type = 'checkbox';
                        input.id = 'request_' + checkboxIndex;
                        input.name = 'selectedRequests';
                        input.value = checkboxIndex; // Use the global checkboxIndex for the value

                        const label = document.createElement('label');
                        label.htmlFor = 'request_' + checkboxIndex;
                        label.textContent = request.name;

                        const hidden = document.createElement('input');
                        input.type = 'hidden';
                        input.name = 'requestData_' + checkboxIndex;
                        input.value = JSON.stringify(item); // Store the request data as a string

                        checkboxDiv.appendChild(input);
                        checkboxDiv.appendChild(label);
                        checkboxesContainer.appendChild(checkboxDiv);
                        checkboxIndex++; // Increment the global index after adding the checkbox
                    }
                }
                return checkboxIndex; // Return the last index used
            }

            try {
                const response = await fetch(`/checkboxes-for-collection/${collectionId}`);
                const requests = await response.json();

                // Clear the existing checkboxes
                checkboxesContainer.innerHTML = '';

                // Start the recursive rendering
                await renderRequests(requests, checkboxIndex);
            } catch (error) {
                console.error('Failed to update checkboxes:', error);
            }
        }

    </script>
</body>

</html>